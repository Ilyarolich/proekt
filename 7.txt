Исключение представляет событие, которое возникает при выполнении программы и нарушает ее нормальной ход. Например, при передаче файла по сети может оборваться сетевое подключение, и в результате чего может быть сгенерировано исключение. Если исключение не обработано, то программа падает и прекращает свою работу. Поэтому при возникновении исключений их следует обрабатывать.

Для обработки исключений применяется конструкция try..catch..finally. В блок try помещаются те действия, которые потенциально могут вызвать исключение. Блок catch перехватывает возникшее исключение и обрабатывает его. Блок finally выполняет некоторые завершающие действия

Ключевое слово throw служит для генерации исключений

Ключевое слово throw служит для генерации исключений, try - для выделения фрагмента кода, в котором генерируется исключение, а catch - для обработки исключения из предыдущего фрагмента try. При этом блок catch следует сразу после try, а самих блоков catch может быть сколько угодно. Так же есть необязательный блок finally в котором выполнится финальное действие.

Прекращение работы программы , а также сообщение об исключении.

try { int result = x / y; } catch(Exception ex) when (y==0) { Console.WriteLine("y не должен быть равен 0"); } catch(Exception ex) { Console.WriteLine(ex.Message); }

Да

catch (Exception ex);

try могут быть вложенные

более специфичные исключения обрабатываются первыми

Свои классы исключений должны наследоваться от System.Exeption или System.ApplicationException

Может иметь одну конструкцию catch без аргументов ( нежелатьельно)

Finally выполняется всегда ( не выполняется в случае выброса StackOverflowException или System.exit(0))

Может быть трансляция исключения

При использовании инструкций lock, using и foreach блоки try/finally создаются автоматически

Генерация исключений в finally (нежелательно - код восстановления или очистки будет выполнен не полностью)

It is OK.

try
{
	int result = x/y;
}
catch(DivideByZeroException)
{
	Console.WriteLine(“Деление на ноль!”);
	throw;
}
Data	Свойство IDictionary, которое содержит произвольные данные в парах "ключ–значение".

HelpLink	Может содержать URL-адрес (или URN) файла справки, который предоставляет подробные сведения о причине возникновения
исключения.

InnerException	Это свойство может использоваться для создания и сохранения последовательностей исключений во время обработки исключений. Его можно использовать для создания нового исключения, содержащего ранее перехваченные исключения. Исходное исключение может быть перехвачено вторым исключением в свойстве InnerException, что позволяет коду, обрабатывающему второе исключение,
проверить дополнительные данные.

Message	Предоставляет сведения о причине возникновения исключения.

Source	Возвращает или задает имя приложения или объекта, вызывавшего ошибку.

StackTrace	Содержит трассировку стека, которую можно использовать для определения места возникновения ошибки. Эта трассировка стека содержит имя исходного файла и, при наличии отладочной информации, номер программной строки.