1. Каково назначение перегрузки операторов?
 2. Как используется ключевое слово  operator?
 3. Какие операции нельзя перегружать в C#?
 4. Можно ли перегрузкой отменить очередность выполнения операции?
 5. Истинно ли следующее утверждение: операция >= может быть перегружена.
 6. Сколько аргументов требуется для определения перегруженной унарной операции?
 7. Можно ли перегружать операцию []? 
8. Можно ли перегружать операцию ->? 
9. Приведите пример оператора приведения типа 
10. Что такое метод расширения? Как и где его можно использовать? 
11. Пусть дан фрагмент кода определения оператора преобразования типа. Определить форму преобразования. 
public static implicit operator Point2D(Point3D a)       {/*  код*/;}  
12. Выберите верное утверждение. Метод расширения может: 
1) получать доступ к public членам расширяемого класса 
2) получать доступ к protected членам расширяемого класса 
3) получать доступ к internal членам расширяемого класса 
4) быть объявлен в любом классе 
5) быть без параметров 
13. Выберите из списка неверное правило перегрузки операторов для C#. 
1) префиксные операции ++ и – – перегружаются парами
2) операции сравнения перегружаются парами: == и != ; < и >;<= и >= 
3) перегруженные операции обязаны возвращать значения
4) должны объявляться как protected 
5) true  и false можно перегружать 

1.	Перегрузка операторов в программировании — один из способов реализации полиморфизма, заключающийся в возможности одновременного существования в одной области видимости нескольких различных вариантов применения оператора, имеющих одно и то же имя, но различающихся типами параметров, к которым они применяются.
2.	Ключевое слово operator используется для перегрузки встроенного оператора или выполнения пользовательского преобразования в объявлении класса или структуры.
3.	=, ., ?:, ??, ->, =>, f(x), as, checked, unchecked, default, delegate, is, new, sizeof, typeof
4.	нет
5.	эта операция может быть перегружена только в паре с <=
6.	2
7.	нет (но есть индексатор)
8.	нет
9.	
10.	Методы расширения позволяют добавлять новые методы в уже существующие типы без создания нового производного класса. Эта функциональность бывает особенно полезна, когда нам хочется добавить в некоторый тип новый метод, но сам тип (класс или структуру) мы изменить не можем, поскольку у нас нет доступа к исходному коду
11.	Неявно
12.	1
13.	1

