lab 9

Делегат представляет собой объект, который может ссылаться на метод. Следовательно, когда создается делегат, то в итоге получается объект, содержащий ссылку на метод. Более того, метод можно вызывать по этой ссылке. Иными словами, делегат позволяет вызывать метод, на который он ссылается.

Хранения ссылок на методы, 2) Callback(передача исполняемого кода в качестве одного из параметров другого кода)
присваивание напрямую с помощью оператора "=", 2) с помощью конструктора, в который передаётся нужный метод
Invoke() принимает делегат и выполняет его в том потоке, в котором был создан элемент управления, у которого вызывается Invoke. BeginInvoke() и EndInvoke() то же самое, но асинхронно

Групповая адресация — это возможность создать список, или цепочку вызовов, для методов, которые вызываются автоматически при обращении к делегату.

События объявляются в классе с помощью ключевого слова event, после которого идет название делегата

Как события связаны с делегатами? Опишите и поясните схему взаимодействия.

Например, отслеживают изменение полей объекта типа. Для правильной работы данного механизма необходимо подписать объект на данные события, указав реакцию на них. Затем в коде при происшествии какого-либо события нужно передавать в данное событие определённый нами параметр, с которым будет выполняться реакция на данное событие. Так же можно отписать объект от данных событий.

Что такое лямбда-выражения? Приведите пример лямбда-выражения с несколькими параметрами.
Лямбда-выражения представляют упрощенную запись анонимных методов. Лямбда-выражения позволяют создать емкие лаконичные методы, которые могут возвращать некоторое значение и которые можно передать в качестве параметров в другие методы. Ламбда-выражения имеют следующий синтаксис: слева от лямбда-оператора => определяется список параметров, а справа блок выражений, использующий эти параметры: delegate int Operation(int x, int y); Operation operation = (x, y) => x + y;

Что такое ковариантность и контравариантность делегатов? Что это дает?
Ковариантность делегата предполагает, что возвращаемым типом может быть более производный тип. Контрвариантность делегата предполагает, что типом параметра может быть более универсальный тип.

10.Поясните разницу между встроенными делегатами Action и Func.

Action имеет тип возвращаемого значения void. Func имеет такой тип возвращаемого значения, который мы определим как последний тип данных Func<in T1, in T2,...in T16, out TResult>()